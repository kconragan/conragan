---
import Base from '../../../layouts/Base.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => {
    const parts = post.slug.split('/');
    let year, slug;

    if (parts.length > 1) {
      year = parts[0];
      slug = parts.slice(1).join('/');
    } else {
      year = 'default';
      slug = parts[0];
    }

    return {
      params: { year, slug },
      props: { post }, // Pass the entire post object
    };
  });
}

// Correct type definition for Astro.props
interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props as Props;
const { Content } = await post.render();

---

<Base title={post.data.title + ' | Kai Conragan'} body="single-article">
  <article class="h-entry">
    <header>
      <div class="post-meta">
        <div class="date">
          <span class="posted-on">
            <time class="dt-published" datetime={post.data.date.toISOString()}>
              {post.data.date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
              })}
            </time>
          </span>
        </div>
        </div>
        <div class="post-title">
          {post.data.type === 'post' && (
            <h1 class="title p-name">
              {post.data.title}
            </h1>
          )}
          {post.data.type === 'link' && (
            <h1 class="title p-name">
              <a href={post.data.link} class="u-url external-link" target="_blank" rel="noopener noreferrer">
                {post.data.title} â†—
              </a>
            </h1>
          )}
        </div>

      <hr class="glyph sea" />
    </header>
    <section class="post-content e-content">
      <Content />
    </section>
  </article>
  <hr class="glyph anchor" />
</Base>
