---
// Imports and Type Definitions
import Base from '../../../layouts/Base.astro';
import { Image } from 'astro:assets';
import imageData from '../../../image-data.json';

/**
 * @typedef {object} Props
 * @property {string} gallery - The gallery name.
 * @property {string} slug - The image slug (filename without extension).
 * @property {string} imagePath - The relative path to the image.
 * @property {{ default: ImageMetadata }} imageModule - The imported image module from import.meta.glob.
 */
interface Props {
  gallery: string;
  slug: string;
  imagePath: string;
  imageModule: { default: ImageMetadata };
}

/**
 * Formats a date string into "Month Year" format.
 * @param {string} dateString - The date string to format (e.g., "2023:10:26 12:00:00").
 * @returns {string} The formatted date string (e.g., "October 2023") or an empty string if the input is invalid.
 */
const formatDate = (dateString: string): string => {
  if (!dateString) return '';

  // Split the date string into date and time components, then further split the date
  const [datePart] = dateString.split(' ');
  const dateParts = datePart.split(':');

  // Ensure the date parts array has the correct number of elements
  if (dateParts.length !== 3) return ''; // Return an empty string if the date format is invalid

  const [year, month, _day] = dateParts.map(Number); // Extract and convert year, month, and day to numbers

  // Months in JavaScript Date objects are 0-indexed (0 for January, 11 for December)
  const monthIndex = month - 1;

  // Validate the year and month
  if (isNaN(year) || isNaN(monthIndex) || monthIndex < 0 || monthIndex > 11) return ''; // Check if parsing results in NaN
  const date = new Date(year, monthIndex);

  // Get the month name from the Date object.
  const monthName = date.toLocaleString('default', { month: 'long' }); // Use options to get full month name.
  return `${monthName} ${year}`; // Output date as "Month Year"
};

/**
 * Generates static routes for each image in the photography directory using Astro's getStaticPaths.
 * @returns {Promise<{params: {gallery: string, slug: string}, props: Props}[]>} An array of objects containing the parameters and properties for each static route.
 */
export async function getStaticPaths() {
  // Use import.meta.glob to get all images in the photography directory
  const allImages = import.meta.glob<{ default: ImageMetadata }>('../../../photography/*/*.{jpg,jpeg,png,gif}');

  const paths = [];

  // Iterate over each image found by import.meta.glob
  for (const path in allImages) {
    if (Object.hasOwn(allImages, path)) {
      const parts = path.split('/'); // Split the path into segments
      const gallery = parts.at(-2) as string; // Extract gallery name from path
      const slugWithExtension = parts.at(-1) as string;
      const slug = slugWithExtension?.split('.')[0] || ''; // Extract slug
      const transformedImagePath = path.replace('../../../', 'src/');

      paths.push({
        params: { gallery, slug },
        props: {
          gallery,
          slug,
          imagePath: transformedImagePath,
          imageModule: await allImages[path](),
        } satisfies Props
      });
    }
  }

  return paths;
}

// Component Logic
const { gallery, slug, imagePath, imageModule } = Astro.props;

// Retrieve image EXIF data using the imagePath.
const imageEXIF = imageData[imagePath];

//Get paths to sibling images.
const galleryImagePaths = Object.keys(imageData).filter(path => path.startsWith(`src/photography/${gallery}`));

// Find the index of the current image in the gallery
const currentIndex = galleryImagePaths.indexOf(imagePath);

//Get paths to sibling images.
const prevImagePath = galleryImagePaths[currentIndex - 1] || null;
const nextImagePath = galleryImagePaths[currentIndex + 1] || null;
---

<Base title="">
  {imageEXIF && (
  <div id="photo-container">
    <div id="photo-image" class="fade-in">
      <Image loading="eager" src={imageModule.default} alt={imageEXIF.Headline?.description ?? slug } width="1200"/>
    </div>
    <div id="photo-content">
      <nav id="page-navigation">
        <div class="metadata-toggle">
          <button id="toggleMetadata" class="project-content-toggle">
            <span class="u-visually-hide">Info</span>
          </button>
        </div>
        <div class="pagination-links">
          <nav>
          {prevImagePath ? (
          <a id="prevLink"
             class="paginate arrow left"
              href={`/photography/${gallery}/${prevImagePath.split('/').pop().split('.')[0]}`}>Previous</a>
          ) : (
            <span>Prev</span>
          )}

          {nextImagePath ? (
          <a id="nextLink"
              class="paginate arrow right"
              href={`/photography/${gallery}/${nextImagePath.split('/').pop().split('.')[0]}`}>Next</a>
          ) : (
            <span>Next</span>
          )}
          </nav>
        </div>
      </nav>
      <h1 class="photo-title fade-in">{imageEXIF.Headline?.description ?? slug}</h1>
      <h2 class="camera-make">
        {imageEXIF.Make?.description ? (
          <>
            {imageEXIF.Make.description}
            {imageEXIF.Model?.description ? (
              <>
                / {imageEXIF.Model.description}
                {imageEXIF.LensModel?.description ? ` ${imageEXIF.LensModel.description}` : null}
              </>
            ) : null}
          </>
        ) : null}
      </h2>
      <dl id="exif">
        {imageEXIF.FocalLength && imageEXIF.FocalLength.description && (
          <>
            <dt>Focal Length</dt>
            <dd>{imageEXIF.FocalLength.description}</dd>
          </>
        )}
        {imageEXIF.FNumber && imageEXIF.FNumber.description && (
          <>
            <dt>Aperture</dt>
            <dd>{imageEXIF.FNumber.description}</dd>
          </>
        )}
        {imageEXIF.ExposureTime && imageEXIF.ExposureTime.description && (
          <>
            <dt>Exposure Time</dt>
            <dd>{imageEXIF.ExposureTime.description}</dd>
          </>
        )}
        {imageEXIF.ISOSpeedRatings && imageEXIF.ISOSpeedRatings.description && (
          <>
            <dt>ISO</dt>
            <dd>{imageEXIF.ISOSpeedRatings.description}</dd>
          </>
        )}
        {imageEXIF.DateTimeOriginal && imageEXIF.DateTimeOriginal.value && (
          <>
            <dt>Captured</dt>
            <dd>{formatDate(imageEXIF.DateTimeOriginal.value[0])}</dd>
          </>
        )}
      </dl>
    </div>
  </div>
  )}
  <script>
    import "../../../scripts/gallery.js";
  </script>
</Base>
